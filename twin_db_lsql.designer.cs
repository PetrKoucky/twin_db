#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace twin_db
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="twin_DB")]
	public partial class twin_db_lsqlDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAchievementCategory(AchievementCategory instance);
    partial void UpdateAchievementCategory(AchievementCategory instance);
    partial void DeleteAchievementCategory(AchievementCategory instance);
    partial void InsertAchievement(Achievement instance);
    partial void UpdateAchievement(Achievement instance);
    partial void DeleteAchievement(Achievement instance);
    partial void InsertEarnedCAchievement(EarnedCAchievement instance);
    partial void UpdateEarnedCAchievement(EarnedCAchievement instance);
    partial void DeleteEarnedCAchievement(EarnedCAchievement instance);
    partial void InsertEarnedGAchievement(EarnedGAchievement instance);
    partial void UpdateEarnedGAchievement(EarnedGAchievement instance);
    partial void DeleteEarnedGAchievement(EarnedGAchievement instance);
    partial void InsertGuild(Guild instance);
    partial void UpdateGuild(Guild instance);
    partial void DeleteGuild(Guild instance);
    partial void InsertCharacter(Character instance);
    partial void UpdateCharacter(Character instance);
    partial void DeleteCharacter(Character instance);
    #endregion
		
		public twin_db_lsqlDataContext() : 
				base(global::twin_db.Properties.Settings.Default.twin_DBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public twin_db_lsqlDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public twin_db_lsqlDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public twin_db_lsqlDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public twin_db_lsqlDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AchievementCategory> AchievementCategories
		{
			get
			{
				return this.GetTable<AchievementCategory>();
			}
		}
		
		public System.Data.Linq.Table<Achievement> Achievements
		{
			get
			{
				return this.GetTable<Achievement>();
			}
		}
		
		public System.Data.Linq.Table<EarnedCAchievement> EarnedCAchievements
		{
			get
			{
				return this.GetTable<EarnedCAchievement>();
			}
		}
		
		public System.Data.Linq.Table<EarnedGAchievement> EarnedGAchievements
		{
			get
			{
				return this.GetTable<EarnedGAchievement>();
			}
		}
		
		public System.Data.Linq.Table<Guild> Guilds
		{
			get
			{
				return this.GetTable<Guild>();
			}
		}
		
		public System.Data.Linq.Table<Character> Characters
		{
			get
			{
				return this.GetTable<Character>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AchievementCategorySet")]
	public partial class AchievementCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _CategoryId;
		
		private int _Type;
		
		private EntitySet<Achievement> _Achievements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    #endregion
		
		public AchievementCategory()
		{
			this._Achievements = new EntitySet<Achievement>(new Action<Achievement>(this.attach_Achievements), new Action<Achievement>(this.detach_Achievements));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="Int NOT NULL")]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AchievementCategorySet_AchievementSet", Storage="_Achievements", ThisKey="Id", OtherKey="AchievementCategory_Id")]
		public EntitySet<Achievement> Achievements
		{
			get
			{
				return this._Achievements;
			}
			set
			{
				this._Achievements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Achievements(Achievement entity)
		{
			this.SendPropertyChanging();
			entity.AchievementCategory = this;
		}
		
		private void detach_Achievements(Achievement entity)
		{
			this.SendPropertyChanging();
			entity.AchievementCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AchievementSet")]
	public partial class Achievement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _AchievementId;
		
		private string _Name;
		
		private string _Description;
		
		private int _Value;
		
		private int _AchievementCategory_Id;
		
		private EntitySet<EarnedCAchievement> _EarnedCAchievements;
		
		private EntitySet<EarnedGAchievement> _EarnedGAchievements;
		
		private EntityRef<AchievementCategory> _AchievementCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAchievementIdChanging(int value);
    partial void OnAchievementIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnValueChanging(int value);
    partial void OnValueChanged();
    partial void OnAchievementCategory_IdChanging(int value);
    partial void OnAchievementCategory_IdChanged();
    #endregion
		
		public Achievement()
		{
			this._EarnedCAchievements = new EntitySet<EarnedCAchievement>(new Action<EarnedCAchievement>(this.attach_EarnedCAchievements), new Action<EarnedCAchievement>(this.detach_EarnedCAchievements));
			this._EarnedGAchievements = new EntitySet<EarnedGAchievement>(new Action<EarnedGAchievement>(this.attach_EarnedGAchievements), new Action<EarnedGAchievement>(this.detach_EarnedGAchievements));
			this._AchievementCategory = default(EntityRef<AchievementCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AchievementId", DbType="Int NOT NULL")]
		public int AchievementId
		{
			get
			{
				return this._AchievementId;
			}
			set
			{
				if ((this._AchievementId != value))
				{
					this.OnAchievementIdChanging(value);
					this.SendPropertyChanging();
					this._AchievementId = value;
					this.SendPropertyChanged("AchievementId");
					this.OnAchievementIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AchievementCategory_Id", DbType="Int NOT NULL")]
		public int AchievementCategory_Id
		{
			get
			{
				return this._AchievementCategory_Id;
			}
			set
			{
				if ((this._AchievementCategory_Id != value))
				{
					if (this._AchievementCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAchievementCategory_IdChanging(value);
					this.SendPropertyChanging();
					this._AchievementCategory_Id = value;
					this.SendPropertyChanged("AchievementCategory_Id");
					this.OnAchievementCategory_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AchievementSet_EarnedCAchievementSet", Storage="_EarnedCAchievements", ThisKey="Id", OtherKey="Achievement_Id")]
		public EntitySet<EarnedCAchievement> EarnedCAchievements
		{
			get
			{
				return this._EarnedCAchievements;
			}
			set
			{
				this._EarnedCAchievements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AchievementSet_EarnedGAchievementSet", Storage="_EarnedGAchievements", ThisKey="Id", OtherKey="Achievement_Id")]
		public EntitySet<EarnedGAchievement> EarnedGAchievements
		{
			get
			{
				return this._EarnedGAchievements;
			}
			set
			{
				this._EarnedGAchievements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AchievementCategorySet_AchievementSet", Storage="_AchievementCategory", ThisKey="AchievementCategory_Id", OtherKey="Id", IsForeignKey=true)]
		public AchievementCategory AchievementCategory
		{
			get
			{
				return this._AchievementCategory.Entity;
			}
			set
			{
				AchievementCategory previousValue = this._AchievementCategory.Entity;
				if (((previousValue != value) 
							|| (this._AchievementCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AchievementCategory.Entity = null;
						previousValue.Achievements.Remove(this);
					}
					this._AchievementCategory.Entity = value;
					if ((value != null))
					{
						value.Achievements.Add(this);
						this._AchievementCategory_Id = value.Id;
					}
					else
					{
						this._AchievementCategory_Id = default(int);
					}
					this.SendPropertyChanged("AchievementCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EarnedCAchievements(EarnedCAchievement entity)
		{
			this.SendPropertyChanging();
			entity.Achievement = this;
		}
		
		private void detach_EarnedCAchievements(EarnedCAchievement entity)
		{
			this.SendPropertyChanging();
			entity.Achievement = null;
		}
		
		private void attach_EarnedGAchievements(EarnedGAchievement entity)
		{
			this.SendPropertyChanging();
			entity.Achievement = this;
		}
		
		private void detach_EarnedGAchievements(EarnedGAchievement entity)
		{
			this.SendPropertyChanging();
			entity.Achievement = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EarnedCAchievementSet")]
	public partial class EarnedCAchievement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _Timestamp;
		
		private int _Character_Id;
		
		private int _Achievement_Id;
		
		private EntityRef<Achievement> _Achievement;
		
		private EntityRef<Character> _Character;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnCharacter_IdChanging(int value);
    partial void OnCharacter_IdChanged();
    partial void OnAchievement_IdChanging(int value);
    partial void OnAchievement_IdChanged();
    #endregion
		
		public EarnedCAchievement()
		{
			this._Achievement = default(EntityRef<Achievement>);
			this._Character = default(EntityRef<Character>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Character_Id", DbType="Int NOT NULL")]
		public int Character_Id
		{
			get
			{
				return this._Character_Id;
			}
			set
			{
				if ((this._Character_Id != value))
				{
					if (this._Character.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCharacter_IdChanging(value);
					this.SendPropertyChanging();
					this._Character_Id = value;
					this.SendPropertyChanged("Character_Id");
					this.OnCharacter_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Achievement_Id", DbType="Int NOT NULL")]
		public int Achievement_Id
		{
			get
			{
				return this._Achievement_Id;
			}
			set
			{
				if ((this._Achievement_Id != value))
				{
					if (this._Achievement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAchievement_IdChanging(value);
					this.SendPropertyChanging();
					this._Achievement_Id = value;
					this.SendPropertyChanged("Achievement_Id");
					this.OnAchievement_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AchievementSet_EarnedCAchievementSet", Storage="_Achievement", ThisKey="Achievement_Id", OtherKey="Id", IsForeignKey=true)]
		public Achievement Achievement
		{
			get
			{
				return this._Achievement.Entity;
			}
			set
			{
				Achievement previousValue = this._Achievement.Entity;
				if (((previousValue != value) 
							|| (this._Achievement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Achievement.Entity = null;
						previousValue.EarnedCAchievements.Remove(this);
					}
					this._Achievement.Entity = value;
					if ((value != null))
					{
						value.EarnedCAchievements.Add(this);
						this._Achievement_Id = value.Id;
					}
					else
					{
						this._Achievement_Id = default(int);
					}
					this.SendPropertyChanged("Achievement");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CharacterSet_EarnedCAchievementSet", Storage="_Character", ThisKey="Character_Id", OtherKey="Id", IsForeignKey=true)]
		public Character Character
		{
			get
			{
				return this._Character.Entity;
			}
			set
			{
				Character previousValue = this._Character.Entity;
				if (((previousValue != value) 
							|| (this._Character.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Character.Entity = null;
						previousValue.EarnedCAchievements.Remove(this);
					}
					this._Character.Entity = value;
					if ((value != null))
					{
						value.EarnedCAchievements.Add(this);
						this._Character_Id = value.Id;
					}
					else
					{
						this._Character_Id = default(int);
					}
					this.SendPropertyChanged("Character");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EarnedGAchievementSet")]
	public partial class EarnedGAchievement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _Timestamp;
		
		private int _Guild_Id;
		
		private int _Achievement_Id;
		
		private EntityRef<Achievement> _Achievement;
		
		private EntityRef<Guild> _Guild;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnGuild_IdChanging(int value);
    partial void OnGuild_IdChanged();
    partial void OnAchievement_IdChanging(int value);
    partial void OnAchievement_IdChanged();
    #endregion
		
		public EarnedGAchievement()
		{
			this._Achievement = default(EntityRef<Achievement>);
			this._Guild = default(EntityRef<Guild>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Guild_Id", DbType="Int NOT NULL")]
		public int Guild_Id
		{
			get
			{
				return this._Guild_Id;
			}
			set
			{
				if ((this._Guild_Id != value))
				{
					if (this._Guild.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGuild_IdChanging(value);
					this.SendPropertyChanging();
					this._Guild_Id = value;
					this.SendPropertyChanged("Guild_Id");
					this.OnGuild_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Achievement_Id", DbType="Int NOT NULL")]
		public int Achievement_Id
		{
			get
			{
				return this._Achievement_Id;
			}
			set
			{
				if ((this._Achievement_Id != value))
				{
					if (this._Achievement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAchievement_IdChanging(value);
					this.SendPropertyChanging();
					this._Achievement_Id = value;
					this.SendPropertyChanged("Achievement_Id");
					this.OnAchievement_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AchievementSet_EarnedGAchievementSet", Storage="_Achievement", ThisKey="Achievement_Id", OtherKey="Id", IsForeignKey=true)]
		public Achievement Achievement
		{
			get
			{
				return this._Achievement.Entity;
			}
			set
			{
				Achievement previousValue = this._Achievement.Entity;
				if (((previousValue != value) 
							|| (this._Achievement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Achievement.Entity = null;
						previousValue.EarnedGAchievements.Remove(this);
					}
					this._Achievement.Entity = value;
					if ((value != null))
					{
						value.EarnedGAchievements.Add(this);
						this._Achievement_Id = value.Id;
					}
					else
					{
						this._Achievement_Id = default(int);
					}
					this.SendPropertyChanged("Achievement");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GuildSet_EarnedGAchievementSet", Storage="_Guild", ThisKey="Guild_Id", OtherKey="Id", IsForeignKey=true)]
		public Guild Guild
		{
			get
			{
				return this._Guild.Entity;
			}
			set
			{
				Guild previousValue = this._Guild.Entity;
				if (((previousValue != value) 
							|| (this._Guild.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Guild.Entity = null;
						previousValue.EarnedGAchievements.Remove(this);
					}
					this._Guild.Entity = value;
					if ((value != null))
					{
						value.EarnedGAchievements.Add(this);
						this._Guild_Id = value.Id;
					}
					else
					{
						this._Guild_Id = default(int);
					}
					this.SendPropertyChanged("Guild");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GuildSet")]
	public partial class Guild : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _Level;
		
		private int _FactionId;
		
		private int _AP;
		
		private bool _ForceRefresh;
		
		private System.DateTime _LastRefresh;
		
		private EntitySet<EarnedGAchievement> _EarnedGAchievements;
		
		private EntitySet<Character> _Characters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLevelChanging(int value);
    partial void OnLevelChanged();
    partial void OnFactionIdChanging(int value);
    partial void OnFactionIdChanged();
    partial void OnAPChanging(int value);
    partial void OnAPChanged();
    partial void OnForceRefreshChanging(bool value);
    partial void OnForceRefreshChanged();
    partial void OnLastRefreshChanging(System.DateTime value);
    partial void OnLastRefreshChanged();
    #endregion
		
		public Guild()
		{
			this._EarnedGAchievements = new EntitySet<EarnedGAchievement>(new Action<EarnedGAchievement>(this.attach_EarnedGAchievements), new Action<EarnedGAchievement>(this.detach_EarnedGAchievements));
			this._Characters = new EntitySet<Character>(new Action<Character>(this.attach_Characters), new Action<Character>(this.detach_Characters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Level]", Storage="_Level", DbType="Int NOT NULL")]
		public int Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactionId", DbType="Int NOT NULL")]
		public int FactionId
		{
			get
			{
				return this._FactionId;
			}
			set
			{
				if ((this._FactionId != value))
				{
					this.OnFactionIdChanging(value);
					this.SendPropertyChanging();
					this._FactionId = value;
					this.SendPropertyChanged("FactionId");
					this.OnFactionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AP", DbType="Int NOT NULL")]
		public int AP
		{
			get
			{
				return this._AP;
			}
			set
			{
				if ((this._AP != value))
				{
					this.OnAPChanging(value);
					this.SendPropertyChanging();
					this._AP = value;
					this.SendPropertyChanged("AP");
					this.OnAPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForceRefresh", DbType="Bit NOT NULL")]
		public bool ForceRefresh
		{
			get
			{
				return this._ForceRefresh;
			}
			set
			{
				if ((this._ForceRefresh != value))
				{
					this.OnForceRefreshChanging(value);
					this.SendPropertyChanging();
					this._ForceRefresh = value;
					this.SendPropertyChanged("ForceRefresh");
					this.OnForceRefreshChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastRefresh", DbType="DateTime NOT NULL")]
		public System.DateTime LastRefresh
		{
			get
			{
				return this._LastRefresh;
			}
			set
			{
				if ((this._LastRefresh != value))
				{
					this.OnLastRefreshChanging(value);
					this.SendPropertyChanging();
					this._LastRefresh = value;
					this.SendPropertyChanged("LastRefresh");
					this.OnLastRefreshChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GuildSet_EarnedGAchievementSet", Storage="_EarnedGAchievements", ThisKey="Id", OtherKey="Guild_Id")]
		public EntitySet<EarnedGAchievement> EarnedGAchievements
		{
			get
			{
				return this._EarnedGAchievements;
			}
			set
			{
				this._EarnedGAchievements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GuildSet_CharacterSet", Storage="_Characters", ThisKey="Id", OtherKey="Guild_Id")]
		public EntitySet<Character> Characters
		{
			get
			{
				return this._Characters;
			}
			set
			{
				this._Characters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EarnedGAchievements(EarnedGAchievement entity)
		{
			this.SendPropertyChanging();
			entity.Guild = this;
		}
		
		private void detach_EarnedGAchievements(EarnedGAchievement entity)
		{
			this.SendPropertyChanging();
			entity.Guild = null;
		}
		
		private void attach_Characters(Character entity)
		{
			this.SendPropertyChanging();
			entity.Guild = this;
		}
		
		private void detach_Characters(Character entity)
		{
			this.SendPropertyChanging();
			entity.Guild = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CharacterSet")]
	public partial class Character : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _Level;
		
		private int _FactionId;
		
		private int _RaceId;
		
		private int _ClassId;
		
		private int _GenderId;
		
		private int _AP;
		
		private int _HK;
		
		private bool _ForceRefresh;
		
		private System.DateTime _LastRefresh;
		
		private System.Nullable<int> _Guild_Id;
		
		private EntitySet<EarnedCAchievement> _EarnedCAchievements;
		
		private EntityRef<Guild> _Guild;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLevelChanging(int value);
    partial void OnLevelChanged();
    partial void OnFactionIdChanging(int value);
    partial void OnFactionIdChanged();
    partial void OnRaceIdChanging(int value);
    partial void OnRaceIdChanged();
    partial void OnClassIdChanging(int value);
    partial void OnClassIdChanged();
    partial void OnGenderIdChanging(int value);
    partial void OnGenderIdChanged();
    partial void OnAPChanging(int value);
    partial void OnAPChanged();
    partial void OnHKChanging(int value);
    partial void OnHKChanged();
    partial void OnForceRefreshChanging(bool value);
    partial void OnForceRefreshChanged();
    partial void OnLastRefreshChanging(System.DateTime value);
    partial void OnLastRefreshChanged();
    partial void OnGuild_IdChanging(System.Nullable<int> value);
    partial void OnGuild_IdChanged();
    #endregion
		
		public Character()
		{
			this._EarnedCAchievements = new EntitySet<EarnedCAchievement>(new Action<EarnedCAchievement>(this.attach_EarnedCAchievements), new Action<EarnedCAchievement>(this.detach_EarnedCAchievements));
			this._Guild = default(EntityRef<Guild>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Level]", Storage="_Level", DbType="Int NOT NULL")]
		public int Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactionId", DbType="Int NOT NULL")]
		public int FactionId
		{
			get
			{
				return this._FactionId;
			}
			set
			{
				if ((this._FactionId != value))
				{
					this.OnFactionIdChanging(value);
					this.SendPropertyChanging();
					this._FactionId = value;
					this.SendPropertyChanged("FactionId");
					this.OnFactionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaceId", DbType="Int NOT NULL")]
		public int RaceId
		{
			get
			{
				return this._RaceId;
			}
			set
			{
				if ((this._RaceId != value))
				{
					this.OnRaceIdChanging(value);
					this.SendPropertyChanging();
					this._RaceId = value;
					this.SendPropertyChanged("RaceId");
					this.OnRaceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassId", DbType="Int NOT NULL")]
		public int ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenderId", DbType="Int NOT NULL")]
		public int GenderId
		{
			get
			{
				return this._GenderId;
			}
			set
			{
				if ((this._GenderId != value))
				{
					this.OnGenderIdChanging(value);
					this.SendPropertyChanging();
					this._GenderId = value;
					this.SendPropertyChanged("GenderId");
					this.OnGenderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AP", DbType="Int NOT NULL")]
		public int AP
		{
			get
			{
				return this._AP;
			}
			set
			{
				if ((this._AP != value))
				{
					this.OnAPChanging(value);
					this.SendPropertyChanging();
					this._AP = value;
					this.SendPropertyChanged("AP");
					this.OnAPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HK", DbType="Int NOT NULL")]
		public int HK
		{
			get
			{
				return this._HK;
			}
			set
			{
				if ((this._HK != value))
				{
					this.OnHKChanging(value);
					this.SendPropertyChanging();
					this._HK = value;
					this.SendPropertyChanged("HK");
					this.OnHKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForceRefresh", DbType="Bit NOT NULL")]
		public bool ForceRefresh
		{
			get
			{
				return this._ForceRefresh;
			}
			set
			{
				if ((this._ForceRefresh != value))
				{
					this.OnForceRefreshChanging(value);
					this.SendPropertyChanging();
					this._ForceRefresh = value;
					this.SendPropertyChanged("ForceRefresh");
					this.OnForceRefreshChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastRefresh", DbType="DateTime NOT NULL")]
		public System.DateTime LastRefresh
		{
			get
			{
				return this._LastRefresh;
			}
			set
			{
				if ((this._LastRefresh != value))
				{
					this.OnLastRefreshChanging(value);
					this.SendPropertyChanging();
					this._LastRefresh = value;
					this.SendPropertyChanged("LastRefresh");
					this.OnLastRefreshChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Guild_Id", DbType="Int")]
		public System.Nullable<int> Guild_Id
		{
			get
			{
				return this._Guild_Id;
			}
			set
			{
				if ((this._Guild_Id != value))
				{
					if (this._Guild.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGuild_IdChanging(value);
					this.SendPropertyChanging();
					this._Guild_Id = value;
					this.SendPropertyChanged("Guild_Id");
					this.OnGuild_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CharacterSet_EarnedCAchievementSet", Storage="_EarnedCAchievements", ThisKey="Id", OtherKey="Character_Id")]
		public EntitySet<EarnedCAchievement> EarnedCAchievements
		{
			get
			{
				return this._EarnedCAchievements;
			}
			set
			{
				this._EarnedCAchievements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GuildSet_CharacterSet", Storage="_Guild", ThisKey="Guild_Id", OtherKey="Id", IsForeignKey=true)]
		public Guild Guild
		{
			get
			{
				return this._Guild.Entity;
			}
			set
			{
				Guild previousValue = this._Guild.Entity;
				if (((previousValue != value) 
							|| (this._Guild.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Guild.Entity = null;
						previousValue.Characters.Remove(this);
					}
					this._Guild.Entity = value;
					if ((value != null))
					{
						value.Characters.Add(this);
						this._Guild_Id = value.Id;
					}
					else
					{
						this._Guild_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Guild");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EarnedCAchievements(EarnedCAchievement entity)
		{
			this.SendPropertyChanging();
			entity.Character = this;
		}
		
		private void detach_EarnedCAchievements(EarnedCAchievement entity)
		{
			this.SendPropertyChanging();
			entity.Character = null;
		}
	}
}
#pragma warning restore 1591
